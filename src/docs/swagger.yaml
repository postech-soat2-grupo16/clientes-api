definitions:
  backoffice.BackofficeRequest:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      endereco:
        type: string
      id:
        type: integer
      nome:
        type: string
      processed:
        type: boolean
      telefone:
        type: string
      updated_at:
        type: string
    type: object
  cliente.Cliente:
    properties:
      cpf:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      nome:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@fastfood.io
    name: API Support
    url: http://www.fastfood.io/support
  description: Here you will find everything you need to have the best possible integration
    with our APIs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://fastfood.io/terms/
  title: Orders API
  version: "1.0"
paths:
  /backoffice:
    get:
      operationId: get-all-requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backoffice.BackofficeRequest'
        "500":
          description: Internal Server Error
      summary: Get all requests
      tags:
      - Backoffice
  /backoffice/{id}/process-data-deletion:
    patch:
      operationId: process-data-deletion
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Process data deletion
      tags:
      - Backoffice
  /backoffice/request-data-deletion:
    post:
      consumes:
      - application/json
      operationId: request-data-deletion
      parameters:
      - description: Backoffice data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/backoffice.BackofficeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backoffice.BackofficeRequest'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Request to delete client data
      tags:
      - Backoffice
  /clientes:
    get:
      operationId: get-all-clients
      parameters:
      - description: Optional Filter by CPF
        in: query
        name: cpf
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cliente.Cliente'
        "500":
          description: Internal Server Error
      summary: Get all clients
      tags:
      - Clients
    post:
      operationId: create-client
      parameters:
      - description: Client data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/cliente.Cliente'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cliente.Cliente'
        "400":
          description: Bad Request
      summary: New client
      tags:
      - Clients
  /clientes/{id}:
    delete:
      operationId: delete-client-by-id
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
      summary: Delete a client by ID
      tags:
      - Clients
    get:
      operationId: get-client-by-id
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cliente.Cliente'
        "404":
          description: Not Found
      summary: Get a client by ID
      tags:
      - Clients
    put:
      operationId: update-client
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Client data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/cliente.Cliente'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cliente.Cliente'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update a client
      tags:
      - Clients
  /clientes/healtcheck:
    get:
      operationId: health-check
      responses:
        "200":
          description: OK
      summary: health check endpoint
      tags:
      - Clients
swagger: "2.0"
